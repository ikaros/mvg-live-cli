#!/usr/bin/env ruby
# encoding: UTF-8

require 'optparse'
require 'ostruct'
require 'date'
require "rubygems"
require "open-uri"

class MvgLive

  VERSION = '0.0.1'

  # The URL where the servce is available
  URL = "http://www.mvg-live.de/ims/dfiStaticAnzeige.svc"

  # These are the difernt means of transportatios provided by mvg
  TRANSPORTATIONS = %w[ubahn bus sbahn tram]

  attr_reader :options

  attr_reader :url_parameters

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin

    # Set defaults
    @options = OpenStruct.new

    @url_parameters = {}
    TRANSPORTATIONS.each do |transport|
      @url_parameters[transport] = "checked"
    end
  end

  def run
    if parsed_options? && arguments_valid?
      output_options if @options.verbose
      process_arguments
      process_command
    else
      output_usage
    end
  end

  protected

    def parsed_options?

      @opts = OptionParser.new do |opts|
        opts.banner = "Usage: mvg station [options]"

        opts.separator ""
        opts.separator "Transportation options:"
        TRANSPORTATIONS.each do |t|
          opts.on("-#{t[0,1].downcase}", "--no-#{t}", "Dont display #{t}") do
            @url_parameters[t] = ""
          end
        end

        opts.separator ""
        opts.separator "Options:"
        opts.on('-p', '--http-proxy [proxy]') { |proxy| @options.proxy = proxy }
        opts.on('-V', '--verbose')            { @options.verbose    = true }
        opts.on('-v', '--version')            { output_version ; exit 0 }
        opts.on('-h', '--help')               { output_help }
      end
      @opts.parse!(@arguments) rescue return false

      process_options
      true
    end

    def process_options
    end

    def output_options
      puts "Options:\n"
      @options.marshal_dump.each do |name, val|
        puts "  #{name} = #{val}"
      end
    end

    def arguments_valid?
      true if @arguments.length == 1
    end

    def process_arguments
       @url_parameters[:haltestelle]  = @arguments.first
    end

    def output_help
      puts "Description"
      puts "  The mvg tool is cli tool consuming the http://www.mvg-live.de service"
      puts "  to make it accessable from command line."
      puts ""
      puts "Examples"
      puts "  mvg Marienplatz"
      puts "  mvg Marienplatz --no-bus"
      puts "  mvg Hauptbahnhof -btu"
      puts ""

      output_usage
      puts ""
      output_author
      puts ""
      output_version

      exit 0
    end

    def output_usage
      puts @opts
    end

    def output_copyright
      puts "Copyright"
      puts "  Copyright (c) 2007 Konstantin Ikaros Kanellopoulos. Licensed under the MIT License:"
      puts "  http://www.opensource.org/licenses/mit-license.php"
    end

    def output_author
      puts "Author"
      puts "  Konstantin Ikaros Kanellopoulos"

    end

    def output_version
      puts "Version"
      puts "  #{File.basename(__FILE__)} version #{VERSION}"
    end

    def encode_url_value(value)
      value.gsub(/ÃŸ/, "%DF")
    end

    def process_command

      params = []
      @url_parameters.each do |param,value|
        value = encode_url_value(value)
        params << "#{param}=#{value}"
      end
      params = params.join("&")

      url = "#{URL}?#{params}"
      puts url if @options.verbose

      # Options for the connection to the service
      http_options = {}
      http_options[:proxy] = @options.proxy if @options.proxy

      # get html data
      doc = open(url, http_options).read
      doc.tr!("\n\r\t",'')

      data = doc.scan(/<tr class="row.*?">.*?class="lineColumn">(.*?)<.*?class="stationColumn">(.*?)<.*?class="inMinColumn">(.*?)<.*?<\/tr>/)
      data.each do|r|
        puts "%-4s | %-30s | %-3s\n" % r
      end
    end

    def process_standard_input
      input = @stdin.read
    end
end

app = MvgLive.new(ARGV, STDIN)
app.run
